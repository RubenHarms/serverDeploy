#!/bin/bash

pushd `dirname $0` > /dev/null
CURRENT_PATH=`pwd -P`
popd > /dev/null

. ${CURRENT_PATH}/../include/main

NAMES=()
USERS=()
REPOSITORIES=()
FOLDERS=()
PROFILES=()

function addSoftware () {
    NAMES+=("$1")
    USERS+=("$2")
    REPOSITORIES+=("$3")
    FOLDERS+=("$4")
    PROFILES+=("$5")
}

function installComposer(){
    php -r "readfile('https://getcomposer.org/installer');" > composer-setup.php
    php composer-setup.php --install-dir=/usr/bin/
    mv /usr/bin/composer.phar /usr/bin/composer
    php -r "unlink('composer-setup.php');"
}

function createGitKey(){
    ssh-keygen -t rsa -C "postbus@rubenharms.nl"
    cat /root/.ssh/id_rsa.pub
    echo "Add the key above to de chain of the repository and press [ENTER] to continue: "
    read continue;
}

requireRoot

addSoftware 'MajesticSender' 'majesticsender' 'git@git.e-vence.nl:rsa/MajesticSender.git' 'majesticsender' ''
addSoftware 'RSA Leads' 'rsaleads' 'git@git.e-vence.nl:rsa/RsaLeads.git' 'rsaleads' ''
addSoftware 'Facturatio' 'facturatio' 'git@git.e-vence.nl:rsa/facturatio.git' 'facturatio' ''
addSoftware 'Doublepoints' 'doublepoints' 'git@git.e-vence.nl:HootMarketing/hootmarketingCashback.git' 'doublepoints' 'doublepoints'


echo "The following software is available: ";
showChoices "NAMES"

askQuestion choices "Which software do you want to install?" 0 "${USERS[@]}"


dir=${FOLDERS[$lastInput]}
user=${USERS[$lastInput]}
repository=${REPOSITORIES[$lastInput]}
profile=${PROFILES[$lastInput]}


sudo mkdir /var/www/domains/${dir} --parents;

if ! [[ -f "/usr/bin/composer" ]]; then
    askQuestion boolean "Do you want to install composer? (y/n) " "y"
    callOnYes "installComposer"
fi

askQuestion boolean "Do you create a new SSH key for the git server? (y/n) " "y"
callOnYes "createGitKey"

git clone ${repository} /var/www/domains/${dir}
groupadd $user
useradd $user -g $user -d /var/www/domains/${dir};
chown ${user}.${user} /var/www/domains/${dir}  -R

if [ "$OS" = "Ubuntu" ]; then
    sudo apt-get install nodejs npm -y
elif [ "$OS" = "RedHat" ]; then
    yum -y install nodejs npm
fi

npm install -g uglify-js
npm install -g uglifycss

cd /var/www/domains/${dir}/


if [ "${profile}" = "" ]
then
    nginxDir="/var/www/domains/${dir}/etc/nginx/";
    prodPath="/var/www/domains/${dir}/app/config/parameters.yml.prod"
else
    nginxDir="/var/www/domains/${dir}/etc/${profile}/nginx/";
    prodPath="/var/www/domains/${dir}/app/config/parameters_${profile}.yml.prod"
fi

if [ -f "${prodPath}"  ]; then
    cp  ${prodPath} app/config/parameters.yml
fi


if [ -d "${nginxDir}/conf.d/" ]; then
    cp ${nginxDir}/conf.d/* /etc/nginx/conf.d/
fi

if ! [[ -d "/etc/nginx/ssl" ]]; then
    mkdir /etc/nginx/ssl;
fi

if [ -d "${nginxDir}/ssl/" ]; then
    cp ${nginxDir}/ssl/* /etc/nginx/ssl/
fi

php -d memory_limit=-1 /usr/bin/composer update

if [ -d "/var/www/domains/${dir}/app/cache/" ]; then
    chmod 777 /var/www/domains/${dir}/app/cache/ -R
elif [ -d "/var/www/domains/${dir}/var/cache/" ]; then
    chmod 777 /var/www/domains/${dir}/var/cache/ -R
fi

if [ -d "/var/www/domains/${dir}/app/logs/" ]; then
    chmod 777 /var/www/domains/${dir}/app/logs/ -R;
elif [ -d "/var/www/domains/${dir}/var/logs/" ]; then
    chmod 777 /var/www/domains/${dir}/var/logs/ -R
fi

if [ -f "/var/www/domains/${dir}/app/console" ]; then
    php /var/www/domains/${dir}/app/console cache:clear --env=prod
    php /var/www/domains/${dir}/app/console fos:js-routing:dump --env=prod
    php /var/www/domains/${dir}/app/console assets:install --env=prod
    php /var/www/domains/${dir}/app/console assetic:dump --env=prod
elif [ -f "/var/www/domains/${dir}/bin/console" ]; then
    php /var/www/domains/${dir}/bin/console cache:clear --env=prod
    php /var/www/domains/${dir}/bin/console fos:js-routing:dump --env=prod
    php /var/www/domains/${dir}/bin/console assets:install --env=prod
    php /var/www/domains/${dir}/bin/console assetic:dump --env=prod
fi

restartPhpFpm
symbolicPhpFpm

service nginx restart

sqlUsername=`cat /var/www/domains/${dir}/app/config/parameters.yml | grep 'database_user:' | cut -d ":" -f2 | cut -d " " -f2 | awk '{print $1}'`
sqlPassword=`cat /var/www/domains/${dir}/app/config/parameters.yml | grep 'database_password:' | cut -d ":" -f2 | cut -d " " -f2 | awk '{print $1}'`
sqlDatabase=`cat /var/www/domains/${dir}/app/config/parameters.yml | grep 'database_name:' | cut -d ":" -f2 | cut -d " " -f2 | awk '{print $1}'`

echo
echo "You can add the following SQL grant statement to the SQL server, if the SQL server is in the same local network: "
echo

devices=(`ls /sys/class/net`)

for ((i = 0; i < ${#devices[@]}; i++))
do
    if ! [[ "${devices[$i]}" = "lo" ]]; then
        localIp=`/sbin/ifconfig ${devices[$i]} | grep 'inet addr:' | cut -d: -f2 | awk '{ print $1}'`
        echo "GRANT ALL ON ${sqlDatabase}.* TO ${sqlUsername}@'${localIp}' identified BY '${sqlPassword}'"
    fi
done

echo
echo "You can add the following SQL grant statement to the SQL server, if the SQL server in another network: "
echo

for ((i = 0; i < ${#devices[@]}; i++))
do
    if ! [[ "${devices[$i]}" = "lo" ]]; then
        externalIp=`curl --interface eth0 -s checkip.dyndns.org | sed -e 's/.*Current IP Address: //' -e 's/<.*$//'`
        echo "GRANT ALL ON ${sqlDatabase}.* TO ${sqlUsername}@'${externalIp}' identified BY '${sqlPassword}'"
    fi
done
